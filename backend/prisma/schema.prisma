// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileStatus {
  pending
  approved
}

enum SOStatus {
  pending //When the sos button is clicked
  ackRequest //When the police clicks a button if it's serious
  serious //When user confirms it's serious
  minor //When user rejects it's serious
  resolved // When police sets it is resolved (This will only happen if the status was marked as serious)

}

enum ReportStatus {
  pending
  resolved
}

model User {
  id              String        @id @default(uuid())
  name            String
  emailId         String       
  clerkId         String        @unique
  status ProfileStatus

  userDataId      String?
  userData        UserData?
  sos             SOS[]
  crimeReport     CrimeReport[]
  favNonUserId     FavNonUserlist[] @relation("idOfNonUsers")
  favuserId        FavUserlist[] @relation("UserId")
  favfavid         FavUserlist[] @relation("FavId")
  receivedRequests FavRequest[] @relation("ToUser")
  sentRequests     FavRequest[] @relation("forUser")
  ackSent          userAck[]    @relation("fromAck")
}

model FavRequest {
  id    String @id @default(uuid())
  forId String
  toId  String
  state String
  for   User   @relation("forUser", fields: [forId], references: [id])
  to    User   @relation("ToUser", fields: [toId], references: [id])
}


// data comes from aadhar
model UserData {
  id      String  @id @default(uuid())
  age     Int?
  address String?
  phone   String?
  pincode String?
  photo   String?
  aadhaar  String?


  user User @relation(fields: [id], references: [id])
}

model Admin {
  id           String @id @default(uuid())
  username     String @unique
  password     String
  refreshToken String?
}

model SOS {
  id    String   @id @default(uuid())
  userId   String
  status   SOStatus
  datetime DateTime
  location String
  
  ackLinks ackLink[] @relation("ackLinkforNoUsers")
  ack      userAck[] @relation("sosAck")
  nonUserAck   nonUserAck[] @relation("sosNonuserAck")
  user        User          @relation(fields: [userId], references: [id])
}

model FavUserlist {
  id   String   @id @default(uuid())
  userId String
  favid String
  user  User @relation("UserId", fields: [userId], references: [id])
  fav  User @relation("FavId", fields: [favid], references: [id])
}

model FavNonUserlist {
  id String @id @default(uuid())
  userId String
  user  User @relation("idOfNonUsers", fields: [userId], references: [id])
  name String
  email String?
  phone String?

  links ackLink[] 
  ack nonUserAck[]  @relation("fromNonuserAck")
}

model userAck {
  id String @id @default(uuid())
  sosId String
  fromId String

  sos SOS @relation("sosAck", fields: [sosId], references: [id])
  from User @relation("fromAck",fields: [fromId],references: [id])
}

model nonUserAck {
  id String @id @default(uuid())
  sosId String
  fromId String 

  sos SOS @relation("sosNonuserAck", fields: [sosId], references: [id])
  from FavNonUserlist @relation("fromNonuserAck", fields: [fromId], references: [id])
}

model CrimeReport {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  medialink   String?
  mediatype   String?
  status      ReportStatus
  crimetime   DateTime
  reporttime  DateTime

  user  User   @relation(fields: [userId], references: [id])
}

model ackLink {
  id String @id @default(uuid())
  forId String
  fromId String

  from SOS @relation("ackLinkforNoUsers",fields: [fromId],references: [id])
  for FavNonUserlist @relation(fields: [forId],references: [id])
}